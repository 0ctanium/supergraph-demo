schema
  @core(feature: "https://specs.apollo.dev/core/v0.1"),
  @core(feature: "https://specs.apollo.dev/join/v0.1")
{
  query: Query
}

directive @core(feature: String!) repeatable on SCHEMA

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

type Applicant implements User
  @join__owner(graph: USERS)
  @join__type(graph: USERS, key: "_id")
  @join__type(graph: CANDIDATES, key: "_id")
  @join__type(graph: CATEGORIES, key: "_id")
{
  _id: ID! @join__field(graph: USERS)
  candidates: [Candidate!]! @join__field(graph: CANDIDATES)
  categories: [Category!]! @join__field(graph: CATEGORIES)
  email: String! @join__field(graph: USERS)
  name: String! @join__field(graph: USERS)
  skills: [String!]! @join__field(graph: USERS)
}

type Candidate
  @join__owner(graph: CANDIDATES)
  @join__type(graph: CANDIDATES, key: "_id")
{
  _id: ID! @join__field(graph: CANDIDATES)
  created_at: Date! @join__field(graph: CANDIDATES)
  user: Applicant! @join__field(graph: CANDIDATES)
}

type Category
  @join__owner(graph: CATEGORIES)
  @join__type(graph: CATEGORIES, key: "_id")
{
  _id: ID! @join__field(graph: CATEGORIES)
}

scalar Date

type Employer implements User
  @join__owner(graph: USERS)
  @join__type(graph: USERS, key: "_id")
  @join__type(graph: CATEGORIES, key: "_id")
  @join__type(graph: JOBS, key: "_id")
{
  _id: ID! @join__field(graph: USERS)
  categories: [Category!]! @join__field(graph: CATEGORIES)
  email: String! @join__field(graph: USERS)
  jobs: [Job!]! @join__field(graph: JOBS)
  name: String! @join__field(graph: USERS)
  skills: [String!]! @join__field(graph: USERS)
}

type Job
  @join__owner(graph: JOBS)
  @join__type(graph: JOBS, key: "_id")
  @join__type(graph: CANDIDATES, key: "_id")
{
  _id: ID! @join__field(graph: JOBS)
  author: Employer! @join__field(graph: JOBS)
  candidates: [Candidate!]! @join__field(graph: CANDIDATES)
  createdAt: Date! @join__field(graph: JOBS)
}

scalar join__FieldSet

enum join__Graph {
  CANDIDATES @join__graph(name: "candidates" url: "http://candidates:4000/graphql")
  CATEGORIES @join__graph(name: "categories" url: "http://categories:4000/graphql")
  JOBS @join__graph(name: "jobs" url: "http://jobs:4000/graphql")
  USERS @join__graph(name: "users" url: "http://users:4000/graphql")
}

type Query {
  allUsers: [User!]! @join__field(graph: USERS)
  user(id: ID!): User @join__field(graph: USERS)
}

interface User {
  _id: ID!
  categories: [Category!]!
  email: String!
  name: String!
  skills: [String!]!
}
